"""
A class for generating synthetic data samples for training and testing machine learning models.

This class provides methods to generate synthetic identifiers and encoded strings that mimic
real-world data formats, such as UUIDs, hexadecimal strings, and Base64 encoded strings. 
These samples are intended for use in testing and development environments only.

Disclaimer:
The data generated by this class is synthetic and should NOT be used in production or
any context where real sensitive data is required.

Methods:
1. `generate_api_key_UUID()`: Generates a random UUID (Universally Unique Identifier).
2. `generate_api_key_hex(length)`: Generates a random hexadecimal string of the specified length.
3. `generate_base64_key(length)`: Generates a random Base64 encoded string of the specified length.
4. `generate_api_key_short(length)`: Generates a random alphanumeric string of the specified length.
5. `generate_prefixed_key(prefix)`: Generates a random key with the specified prefix.
6. `generate_jwt_like()`: Generates a JWT (JSON Web Token) like string with random payload.
7. `generate_custom_key()`: Generates a custom key with a specific format.
8. `generate_password()`: Generates a random password using the Faker library.
9. `run_all_api_methods()`: Runs all the API key generation methods and returns a list of generated keys.

Example Usage:
    generator = SyntheticDataGenerator()
    uuid = generator.generate_api_key_UUID()
    hex_string = generator.generate_api_key_hex(16)
    base64_string = generator.generate_base64_key(24)
"""

from faker import Faker
import random, base64, uuid, secrets
import string, datetime, json

class SensitiveDataGenerator:
    def __init__(self):
        self.faker = Faker()
        self.prefixes = [
            #AWS related prefixes
            "AKIA",
            "ASIA",
            "ABIA"
            "APKA",
            #Stripe related prefixes
            "sk_test",
            "pk_test_",
            "sk_live_",
            "pk_live_",
            #Github related prefixes
            "ghp_",
            "ghs_",
            "gho_",
            #Slack related prefixes
            "xoxb-",
            "xoxp-",
            "xoxa-",
            #Twilio related prefixes
            "SK",
            "AC",
            #GCP related prefixes
            "AIza",
            "ya29.",
            #Heroku 
            "heroku_",
            #SendGrid
            "SG.",
            #Firebase Cloud Messaging (FCM)
            "AAAA"
        ]
    
    def generate_api_key_UUID(self):
        return str(uuid.uuid4())
    
    def generate_base64_key(self, length=32):
        random_bytes = random.getrandbits(length * 8).to_bytes(length, byteorder="big")
        return base64.urlsafe_b64encode(random_bytes).decode('utf-8').rstrip("=")
    
    def generate_api_key_hex(self, length=32):
        return ''.join(random.choices('0123456789abcdef', k=length))
    
    def generate_api_key_short(self, length=16):
        return ''.join(random.choices(string.ascii_letters + string.digits, k=length))
    
    def generate_prefixed_key(self, prefix):
        suffix_length = random.randrange(16,128)
        suffix = ''.join(secrets.choice(string.ascii_letters + string.digits) for _ in range(suffix_length))
        return f"{prefix}{suffix}"
    
    def generate_jwt_like(self):
        random_name = self.faker.name()
        random_payload = {
            "sub": "".join(random.choices(string.digits, k=10)),
            "name": random_name,
            "iat": int(datetime.datetime.now().timestamp())
        }
        header = base64.urlsafe_b64encode(b'{"alg":"RS256","typ":"JWT"}').decode("utf-8").rstrip("=")
        payload = base64.urlsafe_b64encode(json.dumps(random_payload).encode()).decode("utf-8").rstrip("=")
        signature = self.generate_base64_key()
        return f"{header}.{payload}.{signature}"
    
    def generate_custom_key(self):
        segments = []
        for _ in range(4):
            segment = ''.join(random.choices(string.ascii_letters + string.digits, k=8))
            segments.append(segment)
            return '-'.join(segments)
    
    def generate_password(self):
        return self.faker.password()

    def run_all_api_methods(self):
        random_prefix = random.choice(self.prefixes)
        api_keys = [
            self.generate_api_key_UUID(),
            self.generate_api_key_hex(),
            self.generate_api_key_short(),
            self.generate_prefixed_key(random_prefix),
            self.generate_base64_key(),
            self.generate_custom_key()
        ]
        return api_keys








